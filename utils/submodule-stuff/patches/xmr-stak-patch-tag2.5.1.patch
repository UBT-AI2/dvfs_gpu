diff --git a/xmrstak/backend/nvidia/autoAdjust.hpp b/xmrstak/backend/nvidia/autoAdjust.hpp
index 2755e03..456d019 100644
--- a/xmrstak/backend/nvidia/autoAdjust.hpp
+++ b/xmrstak/backend/nvidia/autoAdjust.hpp
@@ -11,6 +11,7 @@
 
 #include <vector>
 #include <cstdio>
+#include <cmath>
 #include <sstream>
 #include <string>
 
@@ -50,17 +51,16 @@ public:
 			ctx.device_blocks = -1;
 			ctx.device_threads = -1;
 
-			// set all device option those marked as auto (-1) to a valid value
-#ifndef _WIN32
-			ctx.device_bfactor = 0;
-			ctx.device_bsleep = 0;
-#else
-			// windows pass, try to avoid that windows kills the miner if the gpu is blocked for 2 seconds
-			ctx.device_bfactor = 6;
+			// set all evice option those marked as auto (-1) to a valid value
+			ctx.device_bfactor = 8;
 			ctx.device_bsleep = 25;
-#endif
-			if(cuda_get_deviceinfo(&ctx) == 0)
+
+			if (cuda_get_deviceinfo(&ctx) == 0) {
+				ctx.device_threads = (int)std::floor(ctx.device_threads * 1.5);
+				//reduce number of blocks to avoid crashes
+				ctx.device_blocks = (int)std::floor(ctx.device_blocks * 0.8);
 				nvidCtxVec.push_back(ctx);
+			}
 			else
 				printer::inst()->print_msg(L0, "WARNING: NVIDIA setup failed for GPU %d.\n", i);
 
diff --git a/xmrstak/backend/nvidia/minethd.cpp b/xmrstak/backend/nvidia/minethd.cpp
index 6460628..1fffd4c 100644
--- a/xmrstak/backend/nvidia/minethd.cpp
+++ b/xmrstak/backend/nvidia/minethd.cpp
@@ -170,13 +170,15 @@ std::vector<iBackend*>* minethd::thread_starter(uint32_t threadOffset, miner_wor
 		std::cout<<"NVIDIA: found "<< deviceCount <<" potential device's"<<std::endl;
 	}
 
-	size_t i, n = jconf::inst()->GetGPUThreadCount();
+	size_t i, n = (params::inst().devices_to_use_.empty()) ? jconf::inst()->GetGPUThreadCount() :
+		params::inst().devices_to_use_.size();
 	pvThreads->reserve(n);
 
 	jconf::thd_cfg cfg;
 	for (i = 0; i < n; i++)
 	{
-		jconf::inst()->GetGPUThreadConfig(i, cfg);
+		int gpu_idx = (params::inst().devices_to_use_.empty()) ? i : params::inst().devices_to_use_[i];
+		jconf::inst()->GetGPUThreadConfig(gpu_idx, cfg);
 
 		if(cfg.cpu_aff >= 0)
 		{
diff --git a/xmrstak/cli/cli-miner.cpp b/xmrstak/cli/cli-miner.cpp
index 40fb9d9..e487782 100644
--- a/xmrstak/cli/cli-miner.cpp
+++ b/xmrstak/cli/cli-miner.cpp
@@ -43,6 +43,7 @@
 #include <iostream>
 #include <time.h>
 #include <iostream>
+#include <sstream>
 
 #ifndef CONF_NO_TLS
 #include <openssl/ssl.h>
@@ -64,50 +65,54 @@ void help()
 
 	cout<<"Usage: "<<params::inst().binaryName<<" [OPTION]..."<<endl;
 	cout<<" "<<endl;
-	cout<<"  -h, --help                 show this help"<<endl;
-	cout<<"  -v, --version              show version number"<<endl;
-	cout<<"  -V, --version-long         show long version number"<<endl;
-	cout<<"  -c, --config FILE          common miner configuration file"<<endl;
-	cout<<"  -C, --poolconf FILE        pool configuration file"<<endl;
+	cout<<"  -h, --help                      show this help"<<endl;
+	cout<<"  -v, --version                   show version number"<<endl;
+	cout<<"  -V, --version-long              show long version number"<<endl;
+	cout<<"  -c, --config FILE               common miner configuration file"<<endl;
+	cout<<"  -C, --poolconf FILE             pool configuration file"<<endl;
 #ifdef _WIN32
-	cout<<"  --noUAC                    disable the UAC dialog"<<endl;
+	cout<<"  --noUAC                         disable the UAC dialog"<<endl;
 #endif
-	cout<<"  --benchmark BLOCKVERSION   ONLY do a benchmark and exit"<<endl;
-	cout<<"  --benchwait WAIT_SEC             ... benchmark wait time"<<endl;
-	cout<<"  --benchwork WORK_SEC             ... benchmark work time"<<endl;
+	cout<<"  --benchmark BLOCKVERSION        ONLY do a benchmark and exit"<<endl;
+	cout<<"  --benchwait WAIT_SEC            ... benchmark wait time"<<endl;
+	cout<<"  --benchwork WORK_SEC            ... benchmark work time"<<endl;
+	cout<<"  --mining-duration seconds       Stop mining after specified number of seconds" << endl;
+	cout<<"  --hash-logfile filename         Log hashrates to specified file" << endl;
+	cout<<"  --hash-log-interval seconds     Interval between hashrate logs in seconds" << endl;
 #ifndef CONF_NO_CPU
-	cout<<"  --noCPU                    disable the CPU miner backend"<<endl;
-	cout<<"  --cpu FILE                 CPU backend miner config file"<<endl;
+	cout<<"  --noCPU                         disable the CPU miner backend"<<endl;
+	cout<<"  --cpu FILE                      CPU backend miner config file"<<endl;
 #endif
 #ifndef CONF_NO_OPENCL
-	cout<<"  --noAMD                    disable the AMD miner backend"<<endl;
-	cout<<"  --noAMDCache               disable the AMD(OpenCL) cache for precompiled binaries"<<endl;
-	cout<<"  --openCLVendor VENDOR      use OpenCL driver of VENDOR and devices [AMD,NVIDIA]"<<endl;
-	cout<<"                             default: AMD"<<endl;
-	cout<<"  --amd FILE                 AMD backend miner config file"<<endl;
+	cout<<"  --noAMD                         disable the AMD miner backend"<<endl;
+	cout<<"  --noAMDCache                    disable the AMD(OpenCL) cache for precompiled binaries"<<endl;
+	cout<<"  --openCLVendor VENDOR           use OpenCL driver of VENDOR and devices [AMD,NVIDIA]"<<endl;
+	cout<<"                                  default: AMD"<<endl;
+	cout<<"  --amd FILE                      AMD backend miner config file"<<endl;
 #endif
 #ifndef CONF_NO_CUDA
-	cout<<"  --noNVIDIA                 disable the NVIDIA miner backend"<<endl;
-	cout<<"  --nvidia FILE              NVIDIA backend miner config file"<<endl;
+	cout<<"  --noNVIDIA                      disable the NVIDIA miner backend"<<endl;
+	cout<<"  --nvidia FILE                   NVIDIA backend miner config file"<<endl;
+	cout<<"  --cuda-devices <0,1,..,n>       List of cuda devices to use" << endl;
 #endif
 #ifndef CONF_NO_HTTPD
-	cout<<"  -i --httpd HTTP_PORT       HTTP interface port"<<endl;
+	cout<<"  -i --httpd HTTP_PORT            HTTP interface port"<<endl;
 #endif
 	cout<<" "<<endl;
 	cout<<"The following options can be used for automatic start without a guided config,"<<endl;
 	cout<<"If config exists then this pool will be top priority."<<endl;
-	cout<<"  -o, --url URL              pool url and port, e.g. pool.usxmrpool.com:3333"<<endl;
-	cout<<"  -O, --tls-url URL          TLS pool url and port, e.g. pool.usxmrpool.com:10443"<<endl;
-	cout<<"  -u, --user USERNAME        pool user name or wallet address"<<endl;
-	cout<<"  -r, --rigid RIGID          rig identifier for pool-side statistics (needs pool support)"<<endl;
-	cout<<"  -p, --pass PASSWD          pool password, in the most cases x or empty \"\""<<endl;
-	cout<<"  --use-nicehash             the pool should run in nicehash mode"<<endl;
-	cout<<"  --currency NAME            currency to mine"<<endl;
+	cout<<"  -o, --url URL                   pool url and port, e.g. pool.usxmrpool.com:3333"<<endl;
+	cout<<"  -O, --tls-url URL               TLS pool url and port, e.g. pool.usxmrpool.com:10443"<<endl;
+	cout<<"  -u, --user USERNAME             pool user name or wallet address"<<endl;
+	cout<<"  -r, --rigid RIGID               rig identifier for pool-side statistics (needs pool support)"<<endl;
+	cout<<"  -p, --pass PASSWD               pool password, in the most cases x or empty \"\""<<endl;
+	cout<<"  --use-nicehash                  the pool should run in nicehash mode"<<endl;
+	cout<<"  --currency NAME                 currency to mine"<<endl;
 	cout<< endl;
 #ifdef _WIN32
 	cout<<"Environment variables:\n"<<endl;
-	cout<<"  XMRSTAK_NOWAIT             disable the dialog `Press any key to exit."<<std::endl;
-	cout<<"                	            for non UAC execution"<<endl;
+	cout<<"  XMRSTAK_NOWAIT                  disable the dialog `Press any key to exit."<<std::endl;
+	cout<<"                	                 for non UAC execution"<<endl;
 	cout<< endl;
 #endif
 	std::string algos;
@@ -695,10 +700,10 @@ int main(int argc, char *argv[])
 			}
 			params::inst().benchmark_wait_sec = waitsec;
 		}
-		else if(opName.compare("--benchwork") == 0)
+		else if (opName.compare("--benchwork") == 0)
 		{
 			++i;
-			if( i >= argc )
+			if (i >= argc)
 			{
 				printer::inst()->print_msg(L0, "No argument for parameter '--benchwork' given");
 				win_exit();
@@ -707,13 +712,63 @@ int main(int argc, char *argv[])
 			char* work_sec = nullptr;
 			long int worksec = strtol(argv[i], &work_sec, 10);
 
-			if(worksec < 10 || worksec >= 300)
+			if (worksec < 10 || worksec >= 300)
 			{
 				printer::inst()->print_msg(L0, "Benchmark work seconds must be in the range [10,300]");
 				return 1;
 			}
 			params::inst().benchmark_work_sec = worksec;
 		}
+		else if (opName.compare("--mining-duration") == 0)
+		{
+			++i;
+			if (i >= argc)
+			{
+				printer::inst()->print_msg(L0, "No argument for parameter '--mining-duration' given");
+				win_exit();
+				return 1;
+			}
+			params::inst().mining_duration = atoi(argv[i]);
+		}
+		else if (opName.compare("--hash-logfile") == 0)
+		{
+			++i;
+			if (i >= argc)
+			{
+				printer::inst()->print_msg(L0, "No argument for parameter '--hash-logfile' given");
+				win_exit();
+				return 1;
+			}
+			params::inst().hash_rate_log = argv[i];
+		}
+		else if (opName.compare("--hash-log-interval") == 0)
+		{
+			++i;
+			if (i >= argc)
+			{
+				printer::inst()->print_msg(L0, "No argument for parameter '--hash-log-interval' given");
+				win_exit();
+				return 1;
+			}
+			params::inst().hash_rate_log_interval_sec = atoi(argv[i]);
+		}
+		else if (opName.compare("--cuda-devices") == 0)
+		{
+			++i;
+			if (i >= argc)
+			{
+				printer::inst()->print_msg(L0, "No argument for parameter '--cuda-devices' given");
+				win_exit();
+				return 1;
+			}
+			std::istringstream ss(argv[i]);
+			int i;
+			while (ss >> i){
+				params::inst().devices_to_use_.push_back(i);
+				if (ss.peek() == ',')
+					ss.ignore();
+			}
+		}
 		else
 		{
 			printer::inst()->print_msg(L0, "Parameter unknown '%s'",argv[i]);
@@ -722,6 +777,24 @@ int main(int argc, char *argv[])
 		}
 	}
 
+	if (params::inst().benchmark_block_version >= 0)
+	{
+		if (params::inst().currency.length() == 0) {
+			printer::inst()->print_str("Specify currency to benchmark with the '--currency' option. !!!!\n");
+			win_exit();
+			return 1;
+		}
+		if (!jconf::inst()->SetMiningCoin(params::inst().currency)) {
+			printer::inst()->print_str("Unknown currency !!!!\n");
+			win_exit();
+			return 1;
+		}
+		jconf::inst()->SetSlowMemSetting(jconf::slow_mem_cfg::print_warning);
+		printer::inst()->print_str("!!!! Doing only a benchmark and exiting. To mine, remove the '--benchmark' option. !!!!\n");
+		return do_benchmark(params::inst().benchmark_block_version, 
+			params::inst().benchmark_wait_sec, params::inst().benchmark_work_sec);
+	}
+
 	// check if we need a guided start
 	if(!configEditor::file_exist(params::inst().configFile))
 		do_guided_config();
@@ -803,11 +876,6 @@ int main(int argc, char *argv[])
 	printer::inst()->print_str("-------------------------------------------------------------------\n");
 	printer::inst()->print_msg(L0, "Mining coin: %s", jconf::inst()->GetMiningCoin().c_str());
 
-	if(params::inst().benchmark_block_version >= 0)
-	{
-		printer::inst()->print_str("!!!! Doing only a benchmark and exiting. To mine, remove the '--benchmark' option. !!!!\n");
-		return do_benchmark(params::inst().benchmark_block_version, params::inst().benchmark_wait_sec, params::inst().benchmark_work_sec);
-	}
 
 	executor::inst()->ex_start(jconf::inst()->DaemonMode());
 
@@ -871,6 +939,7 @@ int do_benchmark(int block_version, int wait_sec, int work_sec)
 	uint64_t iStartStamp = get_timestamp_ms();
 
 	std::this_thread::sleep_for(std::chrono::seconds(work_sec));
+
 	xmrstak::globalStates::inst().switch_work(oWork, dat);
 
 	double fTotalHps = 0.0;
diff --git a/xmrstak/jconf.cpp b/xmrstak/jconf.cpp
index b608c00..b0bf192 100644
--- a/xmrstak/jconf.cpp
+++ b/xmrstak/jconf.cpp
@@ -28,6 +28,7 @@
 #include "xmrstak/misc/jext.hpp"
 #include "xmrstak/misc/console.hpp"
 #include "xmrstak/misc/utility.hpp"
+#include "xmrstak/params.hpp"
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -288,6 +289,9 @@ bool jconf::check_cpu_features()
 
 jconf::slow_mem_cfg jconf::GetSlowMemSetting()
 {
+	if (mem_cfg != slow_mem_cfg::unknown_value)
+		return mem_cfg;
+
 	const char* opt = prv->configValues[sUseSlowMem]->GetString();
 
 	if(strcasecmp(opt, "always") == 0)
@@ -302,6 +306,11 @@ jconf::slow_mem_cfg jconf::GetSlowMemSetting()
 		return unknown_value;
 }
 
+void jconf::SetSlowMemSetting(slow_mem_cfg cfg) {
+	mem_cfg = cfg;
+}
+
+
 std::string jconf::GetMiningCoin()
 {
 	if(xmrstak::params::inst().currency.length() > 0)
@@ -310,6 +319,22 @@ std::string jconf::GetMiningCoin()
 		return prv->configValues[sCurrency]->GetString();
 }
 
+bool jconf::SetMiningCoin(std::string ctmp)
+{
+	std::transform(ctmp.begin(), ctmp.end(), ctmp.begin(), ::tolower);
+	for (size_t i = 0; i < coin_algo_size; i++)
+	{
+		if (ctmp == coins[i].coin_name)
+		{
+			currentCoin = coins[i];
+			return true;
+		}
+	}
+	return false;
+}
+
+
+
 void jconf::GetAlgoList(std::string& list)
 {
 	list.reserve(256);
diff --git a/xmrstak/jconf.hpp b/xmrstak/jconf.hpp
index 102b70f..3a28da7 100644
--- a/xmrstak/jconf.hpp
+++ b/xmrstak/jconf.hpp
@@ -51,6 +51,7 @@ public:
 	inline xmrstak::coin_selection GetCurrentCoinSelection() const { return currentCoin; }
 
 	std::string GetMiningCoin();
+	bool SetMiningCoin(std::string ctmp);
 
 	static void GetAlgoList(std::string& list);
 	static bool IsOnAlgoList(std::string& needle);
@@ -79,6 +80,7 @@ public:
 	static void cpuid(uint32_t eax, int32_t ecx, int32_t val[4]);
 
 	slow_mem_cfg GetSlowMemSetting();
+	void SetSlowMemSetting(slow_mem_cfg cfg);
 
 private:
 	jconf();
@@ -91,4 +93,8 @@ private:
 
 	bool bHaveAes;
 	xmrstak::coin_selection currentCoin;
+	xmrstak_algo mining_algo;
+	xmrstak_algo mining_algo_root;
+	uint8_t mining_fork_version;
+	slow_mem_cfg mem_cfg = slow_mem_cfg::unknown_value;
 };
diff --git a/xmrstak/misc/executor.cpp b/xmrstak/misc/executor.cpp
index a303b34..d6dea6d 100644
--- a/xmrstak/misc/executor.cpp
+++ b/xmrstak/misc/executor.cpp
@@ -36,9 +36,11 @@
 #include "xmrstak/donate-level.hpp"
 #include "xmrstak/version.hpp"
 #include "xmrstak/http/webdesign.hpp"
+#include "xmrstak/params.hpp"
 
 #include <thread>
 #include <string>
+#include <fstream>
 #include <cmath>
 #include <algorithm>
 #include <functional>
@@ -489,6 +491,35 @@ inline void disable_sigpipe() {}
 
 void executor::ex_main()
 {
+	int mining_duration = xmrstak::params::inst().mining_duration;
+	if (mining_duration > 0) {
+		std::thread([mining_duration]() {
+			std::cout << "STARTED KILL TIMER. " << mining_duration << " seconds left..." << std::endl;
+			std::this_thread::sleep_for(std::chrono::seconds(mining_duration));
+			std::cout << "KILL MINER..." << std::endl;
+			std::exit(0);
+		}).detach();
+	}
+
+	const std::string& hash_rate_log = xmrstak::params::inst().hash_rate_log;
+	if (!hash_rate_log.empty()) {
+		std::thread([this, &hash_rate_log]() {
+			std::ofstream log_file(hash_rate_log, std::ofstream::app);
+			while (true) {
+				std::this_thread::sleep_for(std::chrono::seconds(xmrstak::params::inst().hash_rate_log_interval_sec));
+				if (log_file) {
+					long long int system_time_ms = std::chrono::duration_cast<std::chrono::milliseconds>(
+						std::chrono::system_clock::now().time_since_epoch()).count();
+					std::string out;
+					double hs;
+					hashrate_report(out, &hs);
+					log_file << system_time_ms << " " << hs << std::endl;
+					std::cout << out << std::endl;
+				}
+			}
+		}).detach();
+	}
+
 	disable_sigpipe();
 
 	assert(1000 % iTickTime == 0);
@@ -751,8 +782,9 @@ bool executor::motd_filter_web(std::string& motd)
 	return true;
 }
 
-void executor::hashrate_report(std::string& out)
+void executor::hashrate_report(std::string& out, double* hashrate_all_10s)
 {
+	std::lock_guard<std::mutex> lock(hashrate_report_mutex);
 	out.reserve(2048 + pvThreads->size() * 64);
 
 	if(jconf::inst()->PrintMotd())
@@ -841,6 +873,8 @@ void executor::hashrate_report(std::string& out)
 
 	out.append("Totals (ALL):  ");
 	out.append(hps_format(fTotal[0], num, sizeof(num)));
+	if (hashrate_all_10s)
+		*hashrate_all_10s = fTotal[0];
 	out.append(hps_format(fTotal[1], num, sizeof(num)));
 	out.append(hps_format(fTotal[2], num, sizeof(num)));
 	out.append(" H/s\nHighest: ");
diff --git a/xmrstak/misc/executor.hpp b/xmrstak/misc/executor.hpp
index be5ee6c..967f770 100644
--- a/xmrstak/misc/executor.hpp
+++ b/xmrstak/misc/executor.hpp
@@ -74,6 +74,7 @@ private:
 
 	std::list<timed_event> lTimedEvents;
 	std::mutex timed_event_mutex;
+	std::mutex hashrate_report_mutex;
 	thdq<ex_event> oEventQ;
 
 	xmrstak::telemetry* telem;
@@ -98,7 +99,7 @@ private:
 	bool motd_filter_console(std::string& motd);
 	bool motd_filter_web(std::string& motd);
 
-	void hashrate_report(std::string& out);
+	void hashrate_report(std::string& out, double* hashrate_all_10s = nullptr);
 	void result_report(std::string& out);
 	void connection_report(std::string& out);
 
diff --git a/xmrstak/params.hpp b/xmrstak/params.hpp
index 16089ae..857dcba 100644
--- a/xmrstak/params.hpp
+++ b/xmrstak/params.hpp
@@ -3,6 +3,7 @@
 #include "xmrstak/misc/environment.hpp"
 
 #include <string>
+#include <vector>
 
 namespace xmrstak
 {
@@ -56,6 +57,11 @@ struct params
 	int benchmark_block_version = -1;
 	int benchmark_wait_sec = 30;
 	int benchmark_work_sec = 60;
+	//mining_duration >= 0 enable stopping
+	int mining_duration = -1;
+	std::string hash_rate_log;
+	int hash_rate_log_interval_sec = 10;
+	std::vector<int> devices_to_use_;
 
 	params() :
 		binaryName("xmr-stak"),

diff --git a/cmake/Hunter/config.cmake b/cmake/Hunter/config.cmake
index c70de63..fe91693 100644
--- a/cmake/Hunter/config.cmake
+++ b/cmake/Hunter/config.cmake
@@ -1,2 +1,3 @@
 hunter_config(CURL VERSION ${HUNTER_CURL_VERSION} CMAKE_ARGS HTTP_ONLY=ON CMAKE_USE_OPENSSL=OFF CMAKE_USE_LIBSSH2=OFF CURL_CA_PATH=none)
-hunter_config(libjson-rpc-cpp VERSION ${HUNTER_libjson-rpc-cpp_VERSION} CMAKE_ARGS TCP_SOCKET_SERVER=ON)
\ No newline at end of file
+hunter_config(libjson-rpc-cpp VERSION ${HUNTER_libjson-rpc-cpp_VERSION} CMAKE_ARGS TCP_SOCKET_SERVER=ON)
+hunter_config(Boost VERSION 1.66.0)
diff --git a/ethminer/MinerAux.h b/ethminer/MinerAux.h
index 508a662..7899c0f 100644
--- a/ethminer/MinerAux.h
+++ b/ethminer/MinerAux.h
@@ -460,6 +460,26 @@ public:
 				cerr << "Bad " << arg << " option: " << argv[i] << endl;
 				BOOST_THROW_EXCEPTION(BadArgument());
 			}
+		else if (arg == "--mining-duration" && i + 1 < argc)
+			try
+			{
+				m_mining_duration = stol(argv[++i]);
+			}
+			catch (...)
+			{
+				cerr << "Bad " << arg << " option: " << argv[i] << endl;
+				BOOST_THROW_EXCEPTION(BadArgument());
+			}
+		else if (arg == "--hash-logfile" && i + 1 < argc)
+			try
+			{
+				m_hash_logfile = argv[++i];
+			}
+			catch (...)
+			{
+				cerr << "Bad " << arg << " option: " << argv[i] << endl;
+				BOOST_THROW_EXCEPTION(BadArgument());
+			}
 		else if (arg == "-G" || arg == "--opencl")
 			m_minerType = MinerType::CL;
 		else if (arg == "-U" || arg == "--cuda")
@@ -649,6 +669,8 @@ public:
 			<< "Simulation mode:" << endl
 			<< "    -Z [<n>],--simulation [<n>] Mining test mode. Used to validate kernel optimizations. Optionally specify block number." << endl
 			<< "Mining configuration:" << endl
+			<< "    --mining-duration <seconds> Stop mining after specified number of seconds." << endl
+			<< "    --hash-logfile <filename> Log hashrates to specified file." << endl
 			<< "    -G,--opencl  When mining use the GPU via OpenCL." << endl
 			<< "    -U,--cuda  When mining use the GPU via CUDA." << endl
 			<< "    -X,--cuda-opencl Use OpenCL + CUDA in a system with mixed AMD/Nvidia cards. May require setting --opencl-platform 1 or 2. Use --list-devices option to check which platform is your AMD. " << endl
@@ -747,7 +769,7 @@ private:
 			if (!i)
 				cout << "Warming up..." << endl;
 			else
-				cout << "Trial " << i << "... " << flush <<endl;
+				cout << "Trial " << i << "... " << endl;
 			this_thread::sleep_for(chrono::seconds(i ? _trialDuration : _warmupDuration));
 
 			auto mp = f.miningProgress();
@@ -755,7 +777,7 @@ private:
 				continue;
 			auto rate = mp.rate();
 
-			cout << rate << endl;
+			cout << "Hashrate " + std::to_string(i) + ": " + std::to_string(rate) << endl;
 			results.push_back(rate);
 			mean += rate;
 		}
@@ -775,6 +797,15 @@ private:
 	
 	void doMiner()
 	{
+		if (m_mining_duration > 0) {
+			std::thread([this]() {
+				std::cout << "STARTED KILL TIMER. " << m_mining_duration << " seconds left..." << std::endl;
+				std::this_thread::sleep_for(std::chrono::seconds(m_mining_duration));
+				std::cout << "KILL MINER..." << std::endl;
+				g_running = false;
+			}).detach();
+		}
+
 		map<string, Farm::SealerDescriptor> sealers;
 #if ETH_ETHASHCL
 		sealers["opencl"] = Farm::SealerDescriptor{&CLMiner::instances, [](FarmFace& _farm, unsigned _index){ return new CLMiner(_farm, _index); }};
@@ -832,10 +863,22 @@ private:
 		mgr.start();
 
 		// Run CLI in loop
+		std::ofstream hash_logfile;
+		//hash_logfile.exceptions(std::ios_base::badbit | std::ios_base::failbit);
 		while (g_running && mgr.isRunning()) {
 			if (mgr.isConnected()) {
 				auto mp = f.miningProgress(m_show_hwmonitors, m_show_power);
 				minelog << mp << f.getSolutionStats() << f.farmLaunchedFormatted();
+				//log hashrate to file
+				if (!m_hash_logfile.empty()) {
+					if(!hash_logfile.is_open())
+						hash_logfile.open(m_hash_logfile, std::ofstream::app);
+					if (hash_logfile) {
+						long long int system_time_ms = std::chrono::duration_cast<std::chrono::milliseconds>(
+							std::chrono::system_clock::now().time_since_epoch()).count();
+						hash_logfile << system_time_ms << " " << mp.rate() << std::endl;
+					}
+				}
 
 #if ETH_DBUS
 				dbusint.send(toString(mp).data());
@@ -886,6 +929,8 @@ private:
 	unsigned m_benchmarkTrial = 3;
 	unsigned m_benchmarkTrials = 5;
 	unsigned m_benchmarkBlock = 0;
+	int m_mining_duration = -1;
+	std::string m_hash_logfile;
 
 	vector<URI> m_endpoints;
 
